#include <iostream>

using namespace std;

class forward_list{
    
    private:
        struct Node{
            int value;
            Node* nextNode;
            
            Node(){
                value = 0;
                nextNode = nullptr;   
            }
        };
        
        Node* head;
        size_t size;
    
    public:
    
        forward_list();
        virtual ~forward_list();
        
        void AddToFront( int data );
        void AddToEnd( int data );
        void AddToEndCreatingLoop( int data, int loopStart );
        bool AddAfterValue( int value, int data );
        void Delete( unsigned int index );
        bool IsEmpty();
        void Clear();
        void Print(int max=-1 );
        bool DetectLoop( int &loopLength, int &loopStartValue );
};

forward_list::forward_list(){
    head = nullptr;
    size = 0;
    cout << "Creating empty list" << endl;
}

forward_list::~forward_list(){
    //Clear();
    cout << "Destroying list" << endl;
}

void forward_list::Print( int max ){

    Node* pNode = head;
    int count = 0;
    
    while( nullptr != pNode && count < max ){
        cout << pNode->value << "->";
        pNode = pNode->nextNode;
        count++;
    }
    
    cout << endl;
}

void forward_list::Clear(){
    
  Node* pNodeCurr = head;
  Node* pNodeNext = head;
  
  while( pNodeCurr != nullptr ){
      pNodeNext = pNodeCurr->nextNode;
      delete pNodeCurr;
      pNodeCurr = pNodeNext;
  }
  
  head = nullptr;
  size = 0;
  
  cout << "Emptied the list" << endl;
}

bool forward_list::IsEmpty(){
    return ( size == 0 );
}

void forward_list::AddToFront( int data ){
    Node* pNode = head;
    head = new Node();
    head->value = data;
    head->nextNode = pNode;
}

void forward_list::AddToEnd( int data ){

    Node* pNodeCurr = head;
    Node** ppNodePrev = &head;
    
    // Traverse till end of list.
    while( pNodeCurr != nullptr ){
        ppNodePrev = &( pNodeCurr->nextNode );
        pNodeCurr = pNodeCurr->nextNode;
    }
    
    *ppNodePrev = new Node();
    (*ppNodePrev)->nextNode = nullptr;
    (*ppNodePrev)->value = data;
    
    size++;
}

void forward_list::AddToEndCreatingLoop( int data, int loopStart ){

    Node* pNodeCurr = head;
    Node** ppNodePrev = &head;
    int index = 0;
    Node* pLoopStart = nullptr;
    
    // Traverse till end of list.
    while( pNodeCurr != nullptr ){
        ppNodePrev = &( pNodeCurr->nextNode );
        if ( loopStart == index ){
            pLoopStart = pNodeCurr;
            cout << endl
                 << "Starting point of loop is " << pLoopStart->value
                 << endl;
        }
        pNodeCurr = pNodeCurr->nextNode;
        index++;
    }
    
    *ppNodePrev = new Node();
    (*ppNodePrev)->nextNode = pLoopStart;
    (*ppNodePrev)->value = data;
    
    size++;
}

bool forward_list::AddAfterValue( int value, int data ){

    Node* pNodeCurr = head;
    Node* pNodeNext = head;
    
    // Traverse till end of list.
    while( pNodeCurr != nullptr ){
        if ( pNodeCurr->value == value ) break; 
        pNodeCurr = pNodeCurr->nextNode;
    }
    
    if( nullptr == pNodeCurr ){
        cout << "Value does not exist";
        return false;
    }
    
    pNodeNext = pNodeCurr->nextNode;
    pNodeCurr->nextNode = new Node();
    pNodeCurr->nextNode->nextNode = pNodeNext;
    pNodeCurr->nextNode->value = data;
    
    size++;
    return true;
}

bool forward_list::DetectLoop( int &loopLength, int &loopStartValue ){
    Node* pSlow = head;
    Node* pFast = head;
    
    while( nullptr != pFast ){
        pFast = pFast->nextNode;
        pSlow = pSlow->nextNode;
        if ( nullptr != pFast ){
            pFast = pFast->nextNode;
            if ( pSlow == pFast ){
                // We have a loop.
                do{
                    pFast = pFast->nextNode;
                    loopLength++;
                }
                while( pSlow != pFast );
                
                pSlow = head;
                while( pSlow != pFast ){
                   pSlow = pSlow->nextNode;
                   pFast = pFast->nextNode;
                }
                loopStartValue = pSlow->value;
                return true;
            }
        }
    }
    return false;
}

void FindIntersectionAndUnion( forward_list &listA, forward_list &listB,
                               forward_list &intersectionList, forward_list &unionList )
{
    if ( listA.IsEmpty() && listB.IsEmpty() ) return;
    if ( listA.IsEmpty() && !listB.IsEmpty() ){
        unionList = listB;
    }
    if ( !listA.IsEmpty() && listB.IsEmpty() ){
        unionList = listA;
    }
    
    // None of the input lists are empty.
    // Sort the 2 lists.
}

int main() {
    	
    forward_list myList;
    
    myList.AddToEnd(1);
    myList.AddToEnd(2);
    myList.AddToEnd(3);
    myList.AddToEnd(4);
    myList.AddToEnd(5);
    myList.AddToEnd(6);
    myList.AddToEnd(7);
    myList.AddToEnd(8);
    myList.AddToEnd(9);
    myList.AddToEnd(10);
    myList.AddToEnd(11);
    myList.AddToEnd(12);
    
    myList.Print();
    
    // myList.AddToEndCreatingLoop( 13, 4 );
    
    myList.Print(20);
    
    int loopLength = 0, loopStartValue;
    
    myList.DetectLoop( loopLength, loopStartValue )?
    cout << "Loop detected of length " << loopLength << " starting at element value " << loopStartValue:
    cout << "Loop not present";
    
    cout << endl;
    
	return 0;
}
